{"version":3,"sources":["components/Cards/Cards.js","api/api.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","img/Coronavirus_3D_illustration_by_CDC_1600x900-removebg-preview.png","App.js","reportWebVitals.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeUrl","axios","get","console","log","fetchDaily","modifiedData","map","dailyData","total","date","reportDate","fetchCountry","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","src","covid","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e8b6f0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card,CardContent,Typography, Grid } from '@material-ui/core';\r\nimport \"./cards.css\";\r\nimport CountUp from \"react-countup\";\r\n\r\nfunction Cards({data:{confirmed,recovered,deaths,lastUpdate}}) {\r\n    if(!confirmed){\r\n        return 'loading...';\r\n    } \r\n    return (\r\n        <div className=\"cards_container\">\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className=\"card card_infected\">\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className=\"card card_recovered\">\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recoverd</Typography>\r\n                        <Typography variant=\"h5\"> \r\n                            <CountUp \r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className=\"card card_deaths\">\r\n                    <CardContent >\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\"> \r\n                            <CountUp \r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Deaths of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from \"axios\";\r\nconst url =\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData =async(country)=>{\r\n    let changeUrl=url;\r\n    if(country){\r\n        changeUrl=`${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };         \r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async()=>{\r\n    try{\r\n        const {data}=await axios.get(`${url}/daily`);\r\n        const modifiedData=data.map((dailyData)=>({\r\n              confirmed:dailyData.confirmed.total,\r\n              deaths:dailyData.deaths.total,\r\n              date:dailyData.reportDate,  \r\n        }));\r\n        return modifiedData;\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountry = async()=>{\r\n    try{\r\n        const{data:{countries}}=await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name) \r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport{fetchDaily} from \"../../api/api\";\r\nimport {Line,Bar} from \"react-chartjs-2\";\r\nimport \"./chart.css\"\r\n\r\nfunction Chart({data:{confirmed,recovered,deaths},country}) {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi =async()=>{\r\n            setDailyData(await fetchDaily());\r\n        }\r\n       console.log(dailyData);\r\n        fetchApi(); // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const lineChart=(\r\n        dailyData.length !==0\r\n        ?(\r\n        <Line data={{ \r\n            labels: dailyData.map(({date}) =>date), \r\n            datasets:[{\r\n                data:dailyData.map(({confirmed})=>confirmed),\r\n                label:'Infected',\r\n                borderColor:'lightgreen',\r\n                fill:true,\r\n            },{\r\n                data:dailyData.map(({deaths})=>deaths),\r\n                label:'Deaths',\r\n                borderColor:'red',\r\n                fill:true,\r\n                backgroundColor:'rgba(255,0,0,0.2)'\r\n            }], \r\n            }}/>\r\n        ):null\r\n    );\r\n    const barChart=(\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels:['Infected','Recoverd','Deaths'],\r\n                    datasets:[{\r\n                        label:'People',\r\n                        backgroundColor:[\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0,0.5)',\r\n                            'rgba(255,0,0,0.5)',\r\n                        ],\r\n                        data:[confirmed.value,recovered.value,deaths.value]\r\n                    },\r\n                ],\r\n                }}\r\n                options={{\r\n                    legend: { display: false},\r\n                    title: { display: true, text:`Current State is ${country}`},\r\n                }}\r\n            />\r\n        ):null\r\n    );\r\n    \r\n\r\n    return (\r\n        <div className=\"chart_container\">\r\n           {country ? barChart : lineChart} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useEffect, useState } from 'react';\r\nimport{NativeSelect,FormControl} from '@material-ui/core';\r\nimport \"./counrtypicker.css\"\r\nimport {fetchCountry} from \"../../api/api\"\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n    const [fetchedCountries,setFetchedCountries]=useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesAPI= async ()=>{\r\n            setFetchedCountries(await fetchCountry());\r\n        }\r\n        fetchCountriesAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className=\"formcontrol\">\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl> \r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","export default __webpack_public_path__ + \"static/media/Coronavirus_3D_illustration_by_CDC_1600x900-removebg-preview.0e605c32.png\";","import React from \"react\";\nimport Cards from \"./components/Cards/Cards\";\nimport Chart from \"./components/Chart/Chart\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport \"./css/app.css\"\nimport {fetchData} from \"./api/api\"\nimport covid from \"./img/Coronavirus_3D_illustration_by_CDC_1600x900-removebg-preview.png\";\n\nclass App extends React.Component {\n  state={\n    data:{},\n    country:'',\n  }\n\n  async componentDidMount(){\n    const fetchedData=await fetchData();\n    this.setState({data:fetchedData})\n  }\n\n  handleCountryChange =async(country)=>{\n    const fetchedData=await fetchData(country);\n\n    this.setState({data:fetchedData,country:country})\n  }\n\n  render (){\n\n    return(\n    <div className=\"app\">\n      <h1>COVID 19 Tracker<img src={covid} alt=\"covid\"/></h1>\n      <Cards data={this.state.data}/>\n      <CountryPicker handleCountryChange={this.handleCountryChange}/>\n      <Chart data={this.state.data} country={this.state.country}/> \n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./css/index.css\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}